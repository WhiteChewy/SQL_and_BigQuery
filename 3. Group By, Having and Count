+==================================+
|               pets               |
+----+--------------------+--------+
| ID |       Name         | Animal |
+====+====================+========+
| 1  | Dr. Harris Bonkers | Rabbit |
+----+--------------------+--------+
| 2  |        Moon        | Dog    |
+----+--------------------+--------+
| 3  |       Ripley       | Cat    |
+----+--------------------+--------+
| 4  |        Tom         | Cat    |
+----+--------------------+--------+

Теперь когда мы умеем извлекать данные, мы готовы к тому чтобы научится как ее сгруппировывать и считать количество вхождений
в эти группы. Это поможет нам ответить на вопросы вида:
- Как много видов фруктов продает наш магазин?
- Как много видов животных находится на лечении в ветеринарной клинике?

Чтобы ответить на эти вопросы нам нужно будет изучить 3 команды SQL: GROUP BY, HAVING and COUNT(). Для примера будем использовать
уже знакомую нам таблицу pets

COUNT()
Как вы могли догадаться из названия - COUNT() возвращает количество некоторых объектов.

Если добавить COUNT() в SELECT:
query = """
        SELECT COUNT(ID)
        FROM `bigquery-public-data.pet_records.pets`
        """
Результат: +=====+
           | f0_ |
           +=====+
           |  4  |
           +-----+
Результатом будет 4, потому что у нас есть 4 строки в столбце ID.
COUNT() - пример агрегатной функции. Агрегатная функция - это функция которая получает множество данных и на их основе выдает 1.
Такими функциями например являеются AVG(), SUM(), MIN() и MAX(). Как мы можем заметить функция генерирует странные имена столбцов
как например f0_, в дальнейшем мы узнаем как их изменять.

GROUP BY
GROUP BY  берет имя одного или более столбца и трактует все строки с похожим значением как одну группу, когда вы применяетее
агрегатные функции, например COUNT

Например мы хотим знать сколько всего каждого вида животных в таблице. Тогда мы делаем следующий запрос:
query = """
        SELECT Animal, COUNT(ID)
        FROM `bigquery-public-data.pet_records.pets`
        GROUP BY Animal
        """
Результат: +======+=====+
           |Animal| f0_ |
           +======+=====+
           |Rabbit|  1  |
           +------+-----+
           |Dog   |  1  |
           +------+-----+
           |Cat   |  2  |
           +------+-----+

Возвращает таблиу с 3 строками (каждая для 1 вида животных). Как мым видим таблица pets имеет 1 кролика, 1 собаку и 2 кошек.

GROUP BY ... HAVING ...
HAVING проверяет все входжения в GROUP BY на условие указанное после HAVING
Т.е. если мы хотим узнать количество видов животных число представителей которых более 1 то мы делаем следующий запрос
query = """
        SELECT Animal, COUNT(ID)
        FROM `bigquery-public-data.pet_records.pets`
        GROUP BY Animal
        HAVING COUNT(ID) > 1
        """
Результат: +======+=====+
           |Animal| f0_ |
           +======+=====+
           |  Cat |  2  |
           +------+-----+
Так как у нас только 1 животное имеет более 1 представителя - результат будет Cat - 2

Алиасинг и некоторые улучшения
Таблица результатов запросов COUNT(id) называется f0_ - это не очень читаемо и вообще не отражает смысла. Мы можем изменить
это имя добавив AS NumAnimals вконце. Это называется алиасинг.

Если вы не уверены в том что нужно подсчитать в сгруппированных данных - можно использовать COUNT(1) и мы посчитаем просто 
вхождения в группу. Большинство людей считают это особенно читаемым, потому что не фокусирует нас на каких то других 
столбцах. И соответственно запрос проходит быстрее так как проверяется меньшее количество данных.

