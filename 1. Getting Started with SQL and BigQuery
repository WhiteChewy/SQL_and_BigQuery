SQL (Structed Query Language) - язык использующийся для баз данных, и важный навым для любого дата саинтиста. В данном курсе
мы вырабатаем навыки SQL испольщуя BigQuery, веб сервис который позволяет применять SQL запросы к огромным датасетам.

В этом уроке мы изучим самую базу - получение доступа и проверку BigQuery датасетов. После усвоения оного, мы вернемся к 
освоению SQL.

Импорт Big Query
from google.cloud import BigQuery

Первый шаг после импорта библиотеки - создать объект Client класса. 
client = bigquery.Client()

В течении курс мы будем работать с постами Hacker News, веб сайта на темы computer science и кибербезопасность

В BigQuery каждый датасет содержится в соответствующем проекте. В данном случае наш hacker_news датасет содержится в 
проекте bigquery-public-data.
Чтобы получить доступ к датасету,
- Мы начинаем с получения ссылки на датасет с методом dataset()
- Далее мы используем get_dataset() метод с ссылкой на датасет чтобы получить сам датасет.
# Construct a reference to the "hacker_news" dataset
dataset_ref = client.dataset("hacker_news", project="bigquery-public-data")

# API request - fetch the dataset
dataset = client.get_dataset(dataset_ref)

Каждый датасет это просто набор таблиц. Мы можем принять датасет за файл электронных таблиц, который содержит некоторое
количество таблиц.

Для получения списка таблиц в датасете используется метод list_tables()

tables = list(client.list_tables(dataset))

for table in tables:
    print(table.table_id)

Так же вместо получения всего датасета мы можем получить отдельную таблицу.
table_ref = dataset_ref.table('full')
table = client.get_table(table_ref)

Table Schema

Структура таблицы называется схема. Нам нужно понять ее чтобы эффективно извлекать данные из таблицы.
# Print information on all the columns in the "full" table in the "hacker_news" dataset
table.schema

[SchemaField('title', 'STRING', 'NULLABLE', 'Story title', (), None),
 SchemaField('url', 'STRING', 'NULLABLE', 'Story url', (), None),
 SchemaField('text', 'STRING', 'NULLABLE', 'Story or comment text', (), None),
 SchemaField('dead', 'BOOLEAN', 'NULLABLE', 'Is dead?', (), None),
 SchemaField('by', 'STRING', 'NULLABLE', "The username of the item's author.", (), None),
 SchemaField('score', 'INTEGER', 'NULLABLE', 'Story score', (), None),
 SchemaField('time', 'INTEGER', 'NULLABLE', 'Unix time', (), None),
 SchemaField('timestamp', 'TIMESTAMP', 'NULLABLE', 'Timestamp for the unix time', (), None),
 SchemaField('type', 'STRING', 'NULLABLE', 'Type of details (comment, comment_ranking, poll, story, job, pollopt)', (), None),
 SchemaField('id', 'INTEGER', 'NULLABLE', "The item's unique id.", (), None),
 SchemaField('parent', 'INTEGER', 'NULLABLE', 'Parent comment ID', (), None),
 SchemaField('descendants', 'INTEGER', 'NULLABLE', 'Number of story or poll descendants', (), None),
 SchemaField('ranking', 'INTEGER', 'NULLABLE', 'Comment ranking', (), None),
 SchemaField('deleted', 'BOOLEAN', 'NULLABLE', 'Is deleted?', (), None)]

Каждый элемент SchemaField описывает определенный столбец:
- name - имя столбца
- field type - тип данных в полях
- mode - режим столбца (NULLABLE значит что строка в столбце может принимать значение NULL)
- description - описание того что содержиться в данном столбце, комментарий

Мы можем использовать метод list_rows() чтобы проверить только первые 5 строк таблицы full. Данный метод возвращает BigQuery
RowIterator объект который можно быстро привести к DataFrame из pandas используя to_dataframe метод

client.list_rows(table, max_results=5).to_dataframe()

Метод list_rows() так же позволяет нам взглянуть только на информацию в определенном столбце. Если мы хотим взглянуть на 
первыен 5 вхождений в столбце 'by', например, мы с легостью это сделаем.

client.list_rows(table, selected_fields=table.schema[:1], max_results).to_dataframe()